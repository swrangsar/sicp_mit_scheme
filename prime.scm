(define (expmod base exp m)
  (cond ((= exp 0) 1)
	((even? exp)
	 (sqmod (expmod base (/ exp 2) m)
		m))
	(else
	 (remainder (* base (expmod base (- exp 1) m))
		    m))))

(define (sqmod x m)
  (define (check sq)
    (if (= 1 sq)
	(cond ((= 1 x) sq)
	      ((= (- m 1) x) sq)
	      (else 0))
	sq))
  (check (remainder (square x)
		    m)))

(define (miller-rabin n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
	((miller-rabin n) (fast-prime? n (- times 1)))
	(else false)))

(define (prime? n)
  (fast-prime? n 10))
